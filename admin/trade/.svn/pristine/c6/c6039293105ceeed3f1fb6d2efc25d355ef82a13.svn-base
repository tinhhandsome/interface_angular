import { ListComponentBase } from "@app/ultilities/list-component-base";
import { Injector, Component, OnInit, ViewChild, ViewEncapsulation } from "@angular/core";
import { TradeRequestDocServiceProxy, TR_REQUEST_DOC_ENTITY, ReportInfo, AsposeServiceProxy } from "@shared/service-proxies/service-proxies";
import { LazyLoadEvent } from "primeng/api";

import { IUiAction } from "@app/ultilities/ui-action";
import { appModuleAnimation } from "@shared/animations/routerTransition";

import { finalize } from "rxjs/operators";
import { RecordStatusConsts } from "@app/admin/core/ultils/consts/RecordStatusConsts";
import { ReportTypeConsts } from "@app/admin/core/ultils/consts/ReportTypeConsts";
import { FileDownloadService } from "@shared/utils/file-download.service";

@Component({
    templateUrl: './trade-request-doc-list.component.html',
    encapsulation: ViewEncapsulation.None,
    animations: [appModuleAnimation()]
} as any)

export class TradeRequestDocListComponent extends ListComponentBase<TR_REQUEST_DOC_ENTITY> implements IUiAction<TR_REQUEST_DOC_ENTITY>, OnInit {
    filterInput: TR_REQUEST_DOC_ENTITY = new TR_REQUEST_DOC_ENTITY();
    trReuestDoc: TR_REQUEST_DOC_ENTITY[];
    constructor(injector: Injector,
        private asposeService: AsposeServiceProxy,
        private fileDownloadService: FileDownloadService,
        private trReuestDocService: TradeRequestDocServiceProxy

    ) {
        super(injector);

        this.initFilter();
    }

    initDefaultFilter() {
        this.filterInput.brancH_ID = this.appSession.user.subbrId;
        this.filterInput.top = 200;
    }

    ngOnInit(): void {
        // set ui action
        this.appToolbar.setUiAction(this);
        // set role toolbar
        this.appToolbar.setRole('TradeRequestDoc', true, true, false, true, true, true, false, true);
        this.appToolbar.setEnableForListPage();
        this.initCombobox();
    }

    initCombobox() {
        // this.branchService.cM_BRANCH_Search(this.getFillterForCombobox()).subscribe(response => {
        //     this.branchs = response.items;
        // })
    }

    exportToExcel() {
        let reportInfo = new ReportInfo();
        reportInfo.typeExport = ReportTypeConsts.Excel;

        let reportFilter = { ...this.filterInputSearch };

        reportFilter.maxResultCount = -1;

        reportInfo.parameters = this.GetParamsFromFilter(reportFilter)

        reportInfo.values = this.GetParamsFromFilter({
            A1: this.l('CompanyReportHeader')
        });

        reportInfo.pathName = "/TRADE/rpt_tr_request_doc.xlsx";
        reportInfo.storeName = "TR_REQUEST_DOC_Search";

        this.asposeService.getReport(reportInfo).subscribe(x => {
            this.fileDownloadService.downloadTempFile(x);
        });
    }

    search(): void {
        this.showTableLoading();

        this.setSortingForFilterModel(this.filterInputSearch);

        this.trReuestDocService.tR_REQUEST_DOC_Search(this.filterInputSearch)
            .pipe(finalize(() => this.hideTableLoading()))
            .subscribe(result => {
                this.dataTable.records = result.items;
                this.dataTable.totalRecordsCount = result.totalCount;
                this.filterInputSearch.totalCount = result.totalCount;
                this.appToolbar.setEnableForListPage();
                this.updateView();
            });
    }

    onAdd(): void {
        this.navigatePassParam('/app/admin/trade-request-doc-add', null, { filterInput: JSON.stringify(this.filterInputSearch) });
    }

    onUpdate(item: TR_REQUEST_DOC_ENTITY): void {
        this.navigatePassParam('/app/admin/trade-request-doc-edit', { id: item.reQ_ID }, { filterInput: JSON.stringify(this.filterInputSearch) });
    }

    onDelete(item: TR_REQUEST_DOC_ENTITY): void {
        this.message.confirm(
            this.l('DeleteWarningMessage', item.reQ_NAME),
            this.l('AreYouSure'),
            (isConfirmed) => {
                if (isConfirmed) {
                    this.saving = true;
                    this.trReuestDocService.tR_REQUEST_DOC_Del(item.reQ_ID)
                        .pipe(finalize(() => { this.saving = false; }))
                        .subscribe((response) => {
                            if (response['Result'] != '0') {
                                this.showErrorMessage(response['ErrorDesc']);
                            }
                            else {
                                this.showSuccessMessage(this.l('SuccessfullyDeleted'));
                                this.filterInputSearch.totalCount = 0;
                                this.reloadPage();
                            }
                        });
                }
            }
        );
    }

    onApprove(item: TR_REQUEST_DOC_ENTITY): void {

    }

    onViewDetail(item: TR_REQUEST_DOC_ENTITY): void {
        this.navigatePassParam('/app/admin/trade-request-doc-view', { id: item.reQ_ID }, { filterInput: JSON.stringify(this.filterInputSearch) });
    }

    onSave(): void {

    }

    onResetSearch(): void {
        this.filterInput = new TR_REQUEST_DOC_ENTITY();
        this.changePage(0);
    }
}

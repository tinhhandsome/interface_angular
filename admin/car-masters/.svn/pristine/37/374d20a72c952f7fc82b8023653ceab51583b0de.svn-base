import { ListComponentBase } from "@app/ultilities/list-component-base";
import { Injector, Component, OnInit, ViewEncapsulation, ViewChild, AfterViewInit } from "@angular/core";
import { CarDriveServiceProxy, CAR_DRIVE_ENTITY, ReportInfo, AsposeServiceProxy, CAR_MASTER_ENTITY,CarMasterServiceProxy } from "@shared/service-proxies/service-proxies";
import { LazyLoadEvent } from "primeng/api";
import { IUiAction } from "@app/ultilities/ui-action";
import { appModuleAnimation } from "@shared/animations/routerTransition";
import { finalize } from "rxjs/operators";
import { CarMasterModalComponent } from "@app/admin/core/controls/car-modal/car-master-modal.component";
import { AuthStatusConsts } from "@app/admin/core/ultils/consts/AuthStatusConsts";

@Component({
  templateUrl: './car-drive.component.html',
  encapsulation: ViewEncapsulation.None,
  animations: [appModuleAnimation()]
})

export class CarDriveComponent extends ListComponentBase<CAR_DRIVE_ENTITY> implements IUiAction<CAR_DRIVE_ENTITY>, OnInit, AfterViewInit {

    ngAfterViewInit(): void {
        this.stopAutoUpdateView();
    }

    @ViewChild('carModal') carModal: CarMasterModalComponent;
    filterInput: CAR_DRIVE_ENTITY = new CAR_DRIVE_ENTITY();
    filterInputSearch: CAR_DRIVE_ENTITY = new CAR_DRIVE_ENTITY();
    constructor(injector: Injector,
        private carDriveService: CarDriveServiceProxy,
        private carMasterService: CarMasterServiceProxy
    ) {
        super(injector);
        
        this.initEntity();
        this.initFilter();
    }

    ngOnInit(): void {
        // set ui action
        this.appToolbar.setUiAction(this);
        // set role toolbar
        this.appToolbar.setRole('CarDrive', true, true, false, true, true, true, false, true);
        this.appToolbar.setEnableForListPage();
    }
    initModalFilter()
    {
        this.carModal.filterInput.brancH_ID = this.appSession.user.subbrId;
        this.carModal.filterInput.autH_STATUS = AuthStatusConsts.Approve;
        this.carModal.filterInput.level = 'UNIT';
    }
    initEntity()
    {
        this.filterInput = new CAR_DRIVE_ENTITY();
        this.filterInput.caR_MASTER = new CAR_MASTER_ENTITY();
    }
    // initFilter()
    // {
    //     this.getFilterInputInRoute((filterJson) => {
    //         if (filterJson) {
    //             this.filterInput = JSON.parse(filterJson);
    //         }
    //     });
    // }
    search(): void {
        this.showTableLoading();
        
        this.setSortingForFilterModel(this.filterInputSearch);
        if (!this.filterInput.brancH_ID) {
            this.filterInputSearch.brancH_ID = this.appSession.user.subbrId;
        }
        // this.filterInput.brancH_ID = this.appSession.user.subbrId;
        this.filterInputSearch.searcH_TYPE = "A";
        // this.filterInput.recorD_STATUS = RecordStatusConsts.Active;
        // this.filterInputSearch.top = 200;
        this.carDriveService.cAR_DRIVE_Search(this.filterInputSearch)
            .pipe(finalize(() => this.hideTableLoading()))
            .subscribe(result => {
                this.dataTable.records = result.items;
                this.filterInputSearch.totalCount = result.totalCount;
                this.dataTable.totalRecordsCount = result.totalCount;
                this.appToolbar.setEnableForListPage();
                this.updateView();
            });
    }
    getSingleCar(input: CAR_MASTER_ENTITY)
    {
        if(!input || !input.n_PLATE)return;
        this.filterInput.caR_MASTER = input;
        this.filterInput.n_PLATE = input.n_PLATE;
        this.search();
    }
    showCarModal()
    {
        this.initModalFilter();
        this.carModal.show();
    }
    onPlateInputChange()
    {
        var n_PLATE = this.filterInput.n_PLATE;
        if(n_PLATE == null || n_PLATE.trim() == "") return;
        this.carMasterService.cAR_MASTER_ById(n_PLATE,this.appSession.user.subbrId).subscribe(response=>{
            this.getSingleCar(response);
            this.updateView();
        });
    }

    // onSelectRow(item: CAR_DRIVE_ENTITY): void {
    //     this.appToolbar.onSelectRow(item);
    // }

    onAdd(): void {
        this.navigatePassParam('/app/admin/car-drive-add', null, { filterInput: JSON.stringify(this.filterInputSearch) });
    }

    onUpdate(item: CAR_DRIVE_ENTITY): void {
        this.navigatePassParam('/app/admin/car-drive-edit', {id: item.caR_DR_ID,plate: item.n_PLATE}, { filterInput: JSON.stringify(this.filterInputSearch) });
    }

    onDelete(item: CAR_DRIVE_ENTITY): void {
        if(item.autH_STATUS == AuthStatusConsts.Approve)
        {
            this.showErrorMessage(this.l('YouCannotDeleteThisObject'));
            return;
        }
        this.message.confirm(
            this.l('DeleteWarningMessage', item.n_PLATE),
            this.l('AreYouSure'),
            (isConfirmed) => {
                if (isConfirmed) {
                    this.saving = true;
                    this.carDriveService.cAR_DRIVE_Del(item.caR_DR_ID)
                        .pipe(finalize(() => { this.saving = false; }))
                        .subscribe((response) => {
                            if (response.result != '0') {
                                this.showErrorMessage(response.errorDesc);
                            }
                            else {
                                this.showSuccessMessage(this.l('SuccessfullyDeleted'));
                                this.filterInputSearch.totalCount = 0;
                                this.reloadPage();
                            }
                            this.updateView();
                        });
                }
            }
        );
    }

    onApprove(item: CAR_DRIVE_ENTITY): void {

    }

    onViewDetail(item: CAR_DRIVE_ENTITY): void {
        this.navigatePassParam('/app/admin/car-drive-view', {id: item.caR_DR_ID,plate: item.n_PLATE}, { filterInput: JSON.stringify(this.filterInputSearch) });
    }

    onSave(): void {

    }

    // onSearch(): void {
    //     this.changePage(0);
    // }

    onResetSearch(): void {
        this.initEntity();
        this.changePage(0);
        // this.initDefaultFilter();
    }
}
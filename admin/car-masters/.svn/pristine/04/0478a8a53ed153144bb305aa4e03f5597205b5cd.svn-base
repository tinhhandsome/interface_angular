import { Component, Injector, ViewChild, OnInit, ViewEncapsulation, ElementRef } from '@angular/core';
import { appModuleAnimation } from '@shared/animations/routerTransition';
import * as _ from 'lodash';
import { CarDriveServiceProxy, CAR_DRIVE_ENTITY, UltilityServiceProxy, CAR_MASTER_ENTITY, CAR_DRIVE_DT_ENTITY, CarMasterServiceProxy } from '@shared/service-proxies/service-proxies';
import { EditPageState } from '@app/ultilities/enum/edit-page-state';
import { AllCodes } from '@app/ultilities/enum/all-codes';
import { finalize } from 'rxjs/operators';
import { DefaultComponentBase } from '@app/ultilities/default-component-base';
import { IUiAction } from '@app/ultilities/ui-action';
import { AuthStatusConsts } from '@app/admin/core/ultils/consts/AuthStatusConsts';
import { RecordStatusConsts } from '@app/admin/core/ultils/consts/RecordStatusConsts';
import { CarMasterModalComponent } from '@app/admin/core/controls/car-modal/car-master-modal.component';
import * as moment from 'moment';
import { EditableTableComponent } from '@app/admin/core/controls/editable-table/editable-table.component';
import { DateFormatPipe } from '@app/admin/core/pipes/date-format.pipe';
import { ReportTemplateModalComponent } from '@app/admin/core/controls/report-template-modal/report-template-modal.component';
@Component({
    templateUrl: './car-drive-edit.component.html',
    encapsulation: ViewEncapsulation.None,
    animations: [appModuleAnimation()]
})
export class CarDriveEditComponent extends DefaultComponentBase implements OnInit, IUiAction<CAR_DRIVE_ENTITY> {
    constructor(
        injector: Injector,
        private carDriveService: CarDriveServiceProxy,
        private ultilityService: UltilityServiceProxy,
        private carMasterService: CarMasterServiceProxy
    ) {
        super(injector);
        
        this.editPageState = this.getRouteData('editPageState');
        this.initFilter();
        this.initInputModel();
        this.iniEntity();
        this.initIsApproveFunct();
    }

    @ViewChild('editForm') editForm: ElementRef;
    @ViewChild('carModal') carModal: CarMasterModalComponent;
    @ViewChild('editTable') editTable: EditableTableComponent<CAR_DRIVE_DT_ENTITY>;
    @ViewChild('reportTemplate') reportTemplate: ReportTemplateModalComponent;
    
    EditPageState = EditPageState;
    AllCodes = AllCodes;
    editPageState: EditPageState;

    inputModel: CAR_DRIVE_ENTITY = new CAR_DRIVE_ENTITY();
    searchInputModel: CAR_DRIVE_ENTITY = new CAR_DRIVE_ENTITY();
    filterInput: CAR_DRIVE_ENTITY;
    isApproveFunct: boolean;
    totalAmt: number = 0;
    amtType: any = [{typeId: 'gas', typeName: this.l('Gas')}, {typeId: 'road', typeName: this.l('Road')}];


    get disableInput(): boolean {
        return ((this.editPageState == EditPageState.viewDetail) || (this.editPageState == EditPageState.edit && this.inputModel.autH_STATUS == AuthStatusConsts.Approve));
    }
    get isAdd(): boolean {
        return this.editPageState == EditPageState.add;
    }

    isShowError = false;
    isCheckAll = false;
    ngOnInit(): void {
        switch (this.editPageState) {
            case EditPageState.add:
                this.appToolbar.setRole('CarDrive', false, false, true, false, false, false, false, false);
                this.appToolbar.setEnableForEditPage();
                break;
            case EditPageState.edit:
                this.appToolbar.setRole('CarDrive', false, false, true, false, false, false, false, false);
                this.appToolbar.setEnableForEditPage();
                this.getCarDriveDT();
                break;
            case EditPageState.viewDetail:
                this.appToolbar.setRole('CarDrive', false, false, false, false, false, false, true, false);
                this.appToolbar.setEnableForViewDetailPage();
                this.getCarDriveDT();
                break;
        }
        this.appToolbar.setUiAction(this);
    }
    iniEntity() {
        this.inputModel.caR_MASTER = new CAR_MASTER_ENTITY();
        this.inputModel.caR_DRIVE_DT = [];
    }
    initInputModel() {
        this.inputModel.inpuT_DT = moment();
        this.inputModel.neW_INDEX_NUMBER = 0;
        this.inputModel.olD_INDEX_NUMBER = 0;
        this.inputModel.indeX_NUMBER = 0;
        this.inputModel.poweR_RATE_INDEX = 0;
        this.inputModel.curR_POWER_RATE = 0;
    }
    initIsApproveFunct() {
        this.ultilityService.isApproveFunct(this.getCurrentFunctionId()).subscribe(isApproveFunct => {
            this.isApproveFunct = isApproveFunct;
        })
    }
    initModalFilter() {
        this.carModal.filterInput.brancH_ID = this.appSession.user.subbrId;
        this.carModal.filterInput.autH_STATUS = AuthStatusConsts.Approve;
        this.carModal.filterInput.level = 'UNIT';
    }
    getCarDriveByCar(input: CAR_MASTER_ENTITY) {
        if (!input || !input.n_PLATE) return;
        this.inputModel.caR_MASTER = input;
        this.inputModel.caR_ID = input.caR_ID;
        this.inputModel.asseT_ID = input.asseT_ID;
        this.inputModel.asseT_NAME = input.asseT_NAME;
        this.searchInputModel.brancH_ID = this.appSession.user.subbrId;
        this.searchInputModel.searcH_TYPE = 'N';
        this.searchInputModel.n_PLATE = input.n_PLATE;
        this.carDriveService.cAR_DRIVE_Search(this.searchInputModel).subscribe(response => {
            if (response.items.length == 1) {
                var carDrive = response.items[0];
                this.inputModel.poweR_RATE = carDrive.poweR_RATE;
                //  this.inputModel.poweR_RATE_INDEX = carDrive.poweR_RATE_INDEX;
                this.inputModel.parenT_ID = carDrive.parenT_ID;
                this.inputModel.olD_INDEX_NUMBER = carDrive.neW_INDEX_NUMBER;
            }
        });
    }
    onCheckAll(isCheckAll): void {
        this.inputModel.caR_DRIVE_DT.forEach(x => {
            x.isChecked = isCheckAll;
        });
    }
    onAddNewDriveDT() {
        var item = new CAR_DRIVE_DT_ENTITY();
        item.invoicE_DT = moment();
        item.invoicE_AMT = 0;
        this.inputModel.caR_DRIVE_DT.push(item);
        this.editTable.setList(this.inputModel.caR_DRIVE_DT);
    }
    onRemoveDriveDT() {
        this.inputModel.caR_DRIVE_DT = this.inputModel.caR_DRIVE_DT.filter(x => !x.isChecked);
        this.editTable.setList(this.inputModel.caR_DRIVE_DT);
    }
    onNewIndexNumberChange() {
        if (!(this.inputModel.neW_INDEX_NUMBER > this.inputModel.olD_INDEX_NUMBER)) return;
        this.inputModel.indeX_NUMBER = this.inputModel.neW_INDEX_NUMBER - this.inputModel.olD_INDEX_NUMBER;
        if (this.inputModel.poweR_RATE)
            this.inputModel.poweR_RATE_INDEX = (this.inputModel.indeX_NUMBER * this.inputModel.poweR_RATE) / 100;
    }
    showCarModal() {
        this.initModalFilter();
        this.carModal.show();
    }
    ValidateInput() {
        var response = [,];
        response[1] = '';
        var message = '';
        if (!this.inputModel.caR_ID) message = this.l('InvalidPlate');
        else
            if (this.inputModel.neW_INDEX_NUMBER == 0) message = this.l('NewIndexNumberCannotBeEmpty');
            else
                if (this.inputModel.curR_POWER_RATE == 0) message = this.l('CurrentPowerRateCannotBeEmpty');
                else
                    if (this.inputModel.neW_INDEX_NUMBER <= this.inputModel.olD_INDEX_NUMBER) message = this.l('NewIndexNumberMustBeLargerThanOldIndexNumber');
        message == '' ? response[0] = '0' : response[0] = '1';
        response[1] = message;
        return response;
    }
    saveInput() {
        if (this.isApproveFunct == undefined) {
            this.showErrorMessage(this.l('PageLoadUndone'));
            return;
        }

        if ((this.editForm as any).form.invalid) {
            this.isShowError = true;
            this.showErrorMessage(this.l('FormInvalid'));
            return;
        }
        if (this.editPageState != EditPageState.viewDetail) {
            var result = this.ValidateInput();
            if (result[0] != '0') {
                this.showErrorMessage(result[1]);
                return;
            }
            this.saving = true;
            //this.inputModel.makeR_ID = this.appSession.user.userName;
            if (this.editPageState == EditPageState.add) {
                //SET AUDIT FOR INSERT
                this.inputModel.recorD_STATUS = RecordStatusConsts.Active;
                this.inputModel.makeR_ID = this.appSession.user.userName;
                this.inputModel.isleaf = 'Y';
                this.carDriveService.cAR_DRIVE_Ins(this.inputModel).pipe(finalize(() => { this.saving = false; }))
                    .subscribe((response) => {
                        if (response.result != '0') {
                            this.showErrorMessage(response.errorDesc);
                            return;
                        }
                        else {
                            this.showSuccessMessage(this.l('InsertSuccessful'));
                            if (!this.isApproveFunct) {
                                this.carDriveService.cAR_DRIVE_App(response.id, this.appSession.user.userName)
                                    .pipe(finalize(() => { this.saving = false; }))
                                    .subscribe((response) => {
                                        if (response.result != '0') {
                                            this.showErrorMessage(response.errorDesc);
                                        }
                                    });
                            }
                        }
                    });
            }
            else {
                //SET AUDIT FOR UPDATE
                this.inputModel.makeR_ID = this.appSession.user.userName;
                this.carDriveService.cAR_DRIVE_Upd(this.inputModel).pipe(finalize(() => { this.saving = false; }))
                    .subscribe((response) => {
                        if (response.result != '0') {
                            this.showErrorMessage(response.errorDesc);
                        }
                        else {
                            this.showSuccessMessage(this.l('UpdateSuccessful'));
                            if (!this.isApproveFunct) {
                                this.carDriveService.cAR_DRIVE_App(this.inputModel.caR_DR_ID, this.appSession.user.userName)
                                    .pipe(finalize(() => { this.saving = false; }))
                                    .subscribe((response) => {
                                        if (response.result != '0') {
                                            this.showErrorMessage(response.errorDesc);
                                        }
                                        else {
                                            this.inputModel.autH_STATUS = AuthStatusConsts.Approve;
                                        }
                                    });
                            }
                            else {
                                this.inputModel.autH_STATUS = AuthStatusConsts.NotApprove;
                            }
                        }
                    });
            }
        }
    }

    getCarDriveDT() {
        this.carDriveService.cAR_DRIVE_ById(this.getRouteParam('id')).subscribe(response => {
            this.inputModel = response;
            this.iniEntity();
            if (this.inputModel.autH_STATUS == AuthStatusConsts.Approve) {
                this.appToolbar.setButtonApproveEnable(false);
                this.appToolbar.setButtonSaveEnable(false);
            }
            this.carDriveService.cAR_DRIVE_DT_ById(this.getRouteParam('id')).subscribe(response => {
                if (response.length != 0) {
                    this.inputModel.caR_DRIVE_DT = response;
                    this.editTable.setList(this.inputModel.caR_DRIVE_DT);
                }
            });
            this.carMasterService.cAR_MASTER_ById(this.getRouteParam('plate'), this.appSession.user.subbrId).subscribe(response => {
                this.inputModel.caR_MASTER = response;
            });
        });
    }
    onPlateInputChange() {
        var n_PLATE = this.inputModel.caR_MASTER.n_PLATE;
        if (n_PLATE == null || n_PLATE.trim() == '') return;
        this.carMasterService.cAR_MASTER_ById(n_PLATE, this.appSession.user.subbrId).subscribe(response => {
            this.getCarDriveByCar(response);
        })
    }
    reloadTotalAmt() {
        this.totalAmt = this.inputModel.caR_DRIVE_DT.map(x => x.invoicE_AMT).filter(x => x).reduce(this.sumFunct, 0);
    }
    goBack() {
        this.navigatePassParam('/app/admin/car-drive', null, { filterInput: JSON.stringify(this.filterInput) });
    }

    onAdd(): void {
    }

    onUpdate(): void {
    }

    onDelete(): void {
    }

    onApprove(): void {
        var currentUserName = this.appSession.user.userName;
        if (currentUserName == this.inputModel.makeR_ID) {
            this.showErrorMessage(this.l('ApproveFailed'));
            return;
        }
        this.message.confirm(
            this.l('ApproveWarningMessage', this.inputModel.caR_ID),
            this.l('AreYouSure'),
            (isConfirmed) => {
                if (isConfirmed) {
                    this.saving = true;
                    this.carDriveService.cAR_DRIVE_App(this.inputModel.caR_DR_ID, currentUserName)
                        .pipe(finalize(() => { this.saving = false; }))
                        .subscribe((response) => {
                            if (response.result != '0') {
                                this.showErrorMessage(response.errorDesc);
                            }
                            else {
                                this.showSuccessMessage(this.l('SuccessfullyApprove'));
                                this.inputModel.autH_STATUS = AuthStatusConsts.Approve;
                            }
                        }
                        );
                }
            }
        );
    }

    showReportTemplate(){
        let parameters = this.GetParamsFromFilter(this.inputModel);
        let values = this.GetParamsFromFilter({
            branchCode: this.appSession.user.branchCode,
            branchName: this.appSession.user.branchName,
            datePrint: (new DateFormatPipe()).transform(moment()),
            fullName: this.appSession.user.name,
            oldIndex: this.inputModel.olD_INDEX_NUMBER,
            newIndex: this.inputModel.neW_INDEX_NUMBER,
            minusIndex : this.inputModel.neW_INDEX_NUMBER - this.inputModel.olD_INDEX_NUMBER,
            POWER_RATE: this.inputModel.poweR_RATE,
            powerRateIndex: this.inputModel.poweR_RATE_INDEX,
            indexNumber: this.inputModel.indeX_NUMBER,
            N_PLATE: this.getRouteParam('plate')
        });
        this.reportTemplate.show('CarDrivePDN_report', parameters, values);
    }


    onViewDetail(): void {
    }

    onSave(): void {
        this.saveInput();
    }

    onSearch(): void {
    }

    onResetSearch(): void {
    }
}
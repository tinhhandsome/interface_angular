import { ViewEncapsulation, Injector, Component, ViewChild, OnInit } from "@angular/core";
import { ListComponentBase } from "@app/ultilities/list-component-base";
import { CarOfferServiceProxy, BranchServiceProxy, ReportInfo, AsposeServiceProxy } from "@shared/service-proxies/service-proxies";
import { CAR_MASTER_ENTITY, CAR_OFFER_ENTITY, CM_BRANCH_ENTITY } from "@shared/service-proxies/service-proxies";
import { appModuleAnimation } from "@shared/animations/routerTransition";
import { FileDownloadService } from "@shared/utils/file-download.service";
import { IUiAction } from "@app/ultilities/ui-action";
import { finalize } from "rxjs/operators";
import { CarMasterModalComponent } from "@app/admin/core/controls/car-modal/car-master-modal.component";
import { ReportTypeConsts } from "@app/admin/core/ultils/consts/ReportTypeConsts";

@Component({
    templateUrl: './car-offer-info.component.html',
    encapsulation: ViewEncapsulation.None,
    animations: [appModuleAnimation()]
})

export class CarOfferInfoComponent extends ListComponentBase<CAR_OFFER_ENTITY> implements IUiAction<CAR_OFFER_ENTITY>, OnInit {
    constructor(
        injector: Injector,
        private carOfferService: CarOfferServiceProxy,
        private branchService: BranchServiceProxy,
        private fileDownloadService: FileDownloadService,
        private asposeService: AsposeServiceProxy


    ) {
        super(injector);
        this.initFilter();
    }

    ngOnInit(): void {
        this.appToolbar.setUiAction(this);
        this.initBranches();
        if (this.carMasterFilter === null)
            this.carMasterFilter = new CAR_MASTER_ENTITY();
        // set role toolbar
        this.appToolbar.setRole('CarOffer', true, true, false, true, true, true, false, true);
        this.appToolbar.setEnableForListPage();
    }

    filterInput: CAR_OFFER_ENTITY = new CAR_OFFER_ENTITY();
    carMasterFilter: CAR_MASTER_ENTITY = new CAR_MASTER_ENTITY();
    branchs: CM_BRANCH_ENTITY[];

    @ViewChild('carMasterModal') carMasterModal: CarMasterModalComponent;

    getCarOffers(): void {
        if (this.dataTable.shouldResetPaging) {
            this.dataTable.shouldResetPaging = false;
            this.changePage(0);
            return;
        }

        this.showTableLoading();

        this.setSortingForFilterModel(this.filterInput);
        this.appToolbar.setEnableForListPage();
        
        this.filterInput.searcH_TYPE = 'A';
        this.filterInput.offeR_BRANCH = this.appSession.user.subbrId;
        this.carOfferService.cAR_Offer_Search(this.filterInput)
            .pipe(finalize(() => this.hideTableLoading()))
            .subscribe(result => {
                this.dataTable.records = result.items;
                this.dataTable.totalRecordsCount = result.totalCount;
                this.appToolbar.setEnableForListPage();
            });
    }

    onSelectRow(car: CAR_OFFER_ENTITY): void {
        this.appToolbar.onSelectRow(car);
    }

    initBranches(): void {
        this.branchService.cM_BRANCH_Search(this.getFillterForCombobox()).subscribe(response => {
            this.branchs = response.items;
        });
    }

    onSelectCar(event: any): void {
        this.carMasterFilter = event;
        this.filterInput.n_PLATE = this.carMasterFilter.n_PLATE;
    }

    onAdd(): void {
        this.navigatePassParam('/app/admin/car-offer-add', null, { filterInput: JSON.stringify(this.filterInput) });
    }

    onUpdate(item: CAR_OFFER_ENTITY): void {
        this.navigatePassParam('/app/admin/car-offer-edit', { id: item.caR_OFF_ID }, { filterInput: JSON.stringify(this.filterInput) });
    }

    onDelete(item: CAR_OFFER_ENTITY): void {
        if(item.autH_STATUS == 'A') { // nếu item đã duyệt thì không được xóa
            this.showErrorMessage(this.l('CannotDeleteWhenApproved'));
            return;
        }
        this.message.confirm(
            this.l('DeleteWarningMessage', item.n_PLATE),
            this.l('AreYouSure'),
            (isConfirmed) => {
                if (isConfirmed) {
                    this.saving = true;
                    this.carOfferService.cAR_Offer_Del(item.caR_OFF_ID)
                        .pipe(finalize(() => { this.saving = false; }))
                        .subscribe((response) => {
                            if (response['Result'] != '0') {
                                this.showErrorMessage(response['ErrorDesc']);
                            }
                            else {
                                this.showSuccessMessage(this.l('SuccessfullyDeleted'));
                                this.reloadPage();
                            }
                        });
                }
            }
        );
    }

    onApprove(item: CAR_OFFER_ENTITY): void {
    }

    onViewDetail(item: CAR_OFFER_ENTITY): void {
        this.navigatePassParam('/app/admin/car-offer-view', { id: item.caR_OFF_ID },
        {filterInput: JSON.stringify(this.filterInput) });
    }

    onSave(): void {
        this.filterInput.n_PLATE
    }

    onSearch(): void {
        this.getCarOffers();
    }

    onResetSearch(): void {
        this.filterInput = new CAR_OFFER_ENTITY();
        this.carMasterFilter = new CAR_MASTER_ENTITY();
        this.changePage(0);
    }

    exportToExcel() {
        let reportInfo = new ReportInfo();
        reportInfo.typeExport = ReportTypeConsts.Excel;

        let filterReport = { ...this.filterInput }
        filterReport.maxResultCount = -1;

        reportInfo.parameters = this.GetParamsFromFilter(filterReport)

        reportInfo.pathName = "/CAR_MASTER/rpt_car_offer.xlsx";
        reportInfo.storeName = "CAR_OFFER_Search";
        this.asposeService.getReport(reportInfo).subscribe(x => {
            this.fileDownloadService.downloadTempFile(x);
        });
    }
}
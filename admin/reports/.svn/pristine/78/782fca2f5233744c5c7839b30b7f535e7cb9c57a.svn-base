import { Injector, Component, OnInit, ViewEncapsulation, AfterViewInit, ViewChild, ElementRef } from "@angular/core";
import { ReportInfo, AsposeServiceProxy, CM_DEPARTMENT_ENTITY, BranchServiceProxy, CM_BRANCH_ENTITY, CM_DIVISION_ENTITY, DepartmentServiceProxy, CM_SUPPLIER_ENTITY, CM_GOODS_ENTITY, TLUSER_GETBY_BRANCHID_ENTITY, CM_GOODSTYPE_REAL_ENTITY } from "@shared/service-proxies/service-proxies";
import { appModuleAnimation } from "@shared/animations/routerTransition";
import { FileDownloadService } from "@shared/utils/file-download.service";
import { ReportTypeConsts } from "@app/admin/core/ultils/consts/ReportTypeConsts";
import { DefaultComponentBase } from "@app/ultilities/default-component-base";
import * as moment from 'moment';
import { Select2CustomComponent } from "@app/admin/core/controls/custom-select2/select2-custom.component";
import { ReportTemplateModalComponent } from "@app/admin/core/controls/report-template-modal/report-template-modal.component";
import { DateFormatPipe } from "@app/admin/core/pipes/date-format.pipe";

@Component({
    templateUrl: './pl-po.component.html',
    encapsulation: ViewEncapsulation.None,
    animations: [appModuleAnimation()]
})

export class PlPoComponent extends DefaultComponentBase implements OnInit, AfterViewInit {

    filterInput: any = {};

    currentBranchIdField: string;
    currentBranchNameField: string;

    levels: any[];

    plansCombobox: any[] = [
        {
            value: 0,
            display: this.l('SelectAll')
        },
        {
            value: 1,
            display: this.l('outPlan')
        },
        {
            value: -1,
            display: this.l('inPlan')
        }
    ]

    @ViewChild('userSelect') userSelect: Select2CustomComponent;
    @ViewChild('goodsTypeRealSelect') goodsTypeRealSelect: Select2CustomComponent;
    @ViewChild('reportTemplate') reportTemplate : ReportTemplateModalComponent;

    @ViewChild('editForm') editForm: ElementRef;
    isShowError = false;

    users: any[] = [];
    goodsTypeReals: any[] = [];

    ngAfterViewInit(): void {
        this.stopAutoUpdateView();
    }

    constructor(injector: Injector,
        private fileDownloadService: FileDownloadService,
        private asposeService: AsposeServiceProxy) {
        super(injector);
        console.log(this);
    }


    ngOnInit(): void {
        this.levels = this.getLevelsCombobox();
        this.filterInput.BRANCH_LOGIN = this.appSession.user.subbrId;
        this.filterInput.BRANCH_ID = this.appSession.user.subbrId;
        this.filterInput.BRANCH_NAME = this.appSession.user.branch.brancH_NAME;
        this.filterInput.LEVEL = 'ALL';
        this.filterInput.FROM_DATE = moment().startOf('year');
        this.filterInput.TO_DATE = moment().endOf('year');
        this.filterInput.ASSET_TYPE_ID = 'ALL';
        this.filterInput.PLAN = 0;

        this.updateView();
    }


    exportToExcel() {

        if ((this.editForm as any).form.invalid) {
            this.isShowError = true;
            this.showErrorMessage(this.l('FormInvalid'));
            this.updateView();
            return;
        }

        let reportInfo = new ReportInfo();
        reportInfo.typeExport = ReportTypeConsts.Excel;

        if (!this.filterInput.PLAN) {
            this.filterInput.PLAN = '';
        }

        if (!this.filterInput.GOODS_ID) {
            this.filterInput.GOODS_ID = '';
        }

        if (!this.filterInput.MAKER_ID) {
            this.filterInput.MAKER_ID = '';
        }

        if (!this.filterInput.BRANCH_CREATE) {
            this.filterInput.BRANCH_CREATE = '';
        }

        if (!this.filterInput.ISDELIVERY) {
            this.filterInput.ISDELIVERY = '';
        }

        if (!this.filterInput.ISPAYMENT) {
            this.filterInput.ISPAYMENT = '';
        }

        if (!this.filterInput.PLAN) {
            this.filterInput.PLAN = '';
        }

        reportInfo.parameters = this.GetParamsFromFilter(this.filterInput);

        reportInfo.values = this.GetParamsFromFilter({
            branchCode: this.appSession.user.branch.brancH_CODE,
            branchName: this.appSession.user.branch.brancH_NAME,
            level: this.levels.filter(x => x.value == this.filterInput.LEVEL)[0].display,
            fullName : this.appSession.user.name,
            datePrint: moment(),
            A4: (this.l('FromDate') + ' ' + this.filterInput.FROM_DATE.format('DD/MM/YYYY') + ' ' + this.l('ToDate') + ' ' + this.filterInput.TO_DATE.format('DD/MM/YYYY')).toUpperCase()
        });

        reportInfo.pathName = "/REPORT/KH_BC03.xlsx";
        reportInfo.storeName = "rpt_KH_BC03_Excel";

        this.asposeService.getReport(reportInfo).subscribe(x => {
            this.fileDownloadService.downloadTempFile(x);
            this.showSuccessMessage(this.l('ExportFileSuccess'));
            this.updateView();
        });
    }

    onSelectBranch(branch: CM_BRANCH_ENTITY) {
        this.filterInput[this.currentBranchIdField] = branch.brancH_ID;
        this.filterInput[this.currentBranchNameField] = branch.brancH_NAME;
    }

    onBranchFocusOut() {
        this.filterInput.BRANCH_CREATE = undefined;
        this.filterInput.BRANCH_CREATE_NAME = undefined;
    }

    previewTemplate() {

        if ((this.editForm as any).form.invalid) {
            this.isShowError = true;
            this.showErrorMessage(this.l('FormInvalid'));
            this.updateView();
            return;
        }

        if (!this.filterInput.PLAN) {
            this.filterInput.PLAN = '';
        }

        if (!this.filterInput.GOODS_ID) {
            this.filterInput.GOODS_ID = '';
        }

        if (!this.filterInput.MAKER_ID) {
            this.filterInput.MAKER_ID = '';
        }

        if (!this.filterInput.BRANCH_CREATE) {
            this.filterInput.BRANCH_CREATE = '';
        }

        if (!this.filterInput.ISDELIVERY) {
            this.filterInput.ISDELIVERY = '';
        }

        if (!this.filterInput.ISPAYMENT) {
            this.filterInput.ISPAYMENT = '';
        }

        if (!this.filterInput.PLAN) {
            this.filterInput.PLAN = '';
        }

        let parameters = this.GetParamsFromFilter(this.filterInput);
        let values = this.GetParamsFromFilter({
            branchCode: this.appSession.user.branch.brancH_CODE,
            branchName: this.appSession.user.branch.brancH_NAME,
            level: this.filterInput.LEVEL == 'ALL' ? this.l('AllGoods') : this.l('Branch'),
            fullName: this.appSession.user.name,
            duration: (this.l('FromDate') + ' ' + this.filterInput.FROM_DATE.format('DD/MM/YYYY') + ' ' + this.l('ToDate').toLocaleLowerCase() + ' ' + this.filterInput.TO_DATE.format('DD/MM/YYYY')).toUpperCase(),
            datePrint: (new DateFormatPipe()).transform(moment()),
        });

        this.reportTemplate.show('PlPo_Report', parameters, values)
    }

    // printPreview() {



    //     this.previewTemplateService.printReportTemplate("TSCD_BC16A", parameters, values);
    // }

}

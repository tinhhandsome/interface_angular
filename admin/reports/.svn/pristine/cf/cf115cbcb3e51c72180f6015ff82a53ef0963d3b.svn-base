import { Injector, Component, OnInit, ViewEncapsulation, AfterViewInit, ViewChild, ElementRef } from "@angular/core";
import { ReportInfo, AsposeServiceProxy, CM_DEPARTMENT_ENTITY, CM_BRANCH_ENTITY, CM_TERM_ENTITY, TermServiceProxy, AssStatusServiceProxy } from "@shared/service-proxies/service-proxies";
import { appModuleAnimation } from "@shared/animations/routerTransition";
import { FileDownloadService } from "@shared/utils/file-download.service";
import { ReportTypeConsts } from "@app/admin/core/ultils/consts/ReportTypeConsts";
import { DefaultComponentBase } from "@app/ultilities/default-component-base";
import * as moment from 'moment';
import { Select2CustomComponent } from "@app/admin/core/controls/custom-select2/select2-custom.component";
import { PreviewTemplateService } from "@app/admin/common/preview-template/preview-template.service";
import { ReportTemplateModalComponent } from "@app/admin/core/controls/report-template-modal/report-template-modal.component";
import { DateFormatPipe } from "@app/admin/core/pipes/date-format.pipe";

@Component({
    templateUrl: './ass-list-asset-inventory.component.html',
    encapsulation: ViewEncapsulation.None,
    animations: [appModuleAnimation()]
})

export class AssListAssetInventory extends DefaultComponentBase implements OnInit, AfterViewInit {

    didsableInput: boolean = true;
    terms: CM_TERM_ENTITY[] = [];
    filterInput: any = {};

    termName: string = '';
    branchType: string;
    levels: any[];
    isShowError: boolean = false;
    assStatuses: any[] = [];
    assTypes: any = [{ TYPE_ID: 'TSCD', TYPE_NAME: 'TSCD' }, { TYPE_ID: 'CCLD', TYPE_NAME: 'CCLD' }];

    @ViewChild('exportForm') exportForm: ElementRef;
    @ViewChild('depSelect') depSelect: Select2CustomComponent;
    @ViewChild('reportTemplate') reportTemplate: ReportTemplateModalComponent;

    ngAfterViewInit(): void {
        // COMMENT: this.stopAutoUpdateView();
        this.setupValidationMessage();
    }

    constructor(injector: Injector,
        private fileDownloadService: FileDownloadService,
        private asposeService: AsposeServiceProxy,
        private termService: TermServiceProxy,
        private assStatusService: AssStatusServiceProxy,
        private previewTemplateService: PreviewTemplateService) {
        super(injector);
    }


    ngOnInit(): void {
        this.levels = this.getLevelsCombobox();
        this.initTerms();
        this.getAssStatus();
        this.filterInput.BRANCH_LOGIN = this.appSession.user.subbrId;
        this.filterInput.LEVEL = 'ALL';
        this.filterInput.TYPE_ID = 'TSCD';
        this.branchType = this.appSession.user.branch.brancH_TYPE;
        this.filterInput.BRANCH_ID = this.appSession.user.subbrId;
        this.filterInput.BRANCH_NAME = this.appSession.user.branchName;
        this.filterInput.FROMDATE = moment().startOf('year');
        this.filterInput.TODATE = moment().endOf('year');
    }


    exportToExcel() {
        if ((this.exportForm as any).form.invalid) {
            this.isShowError = true;
            this.showErrorMessage(this.l('FormInvalid'));
            this.updateView();
            return;
        }
        else if(!this.filterInput.TODATE){
            this.showErrorMessage(this.l('ChooseDateRequired'));
            this.updateView();
            return;
        }
        else if (this.filterInput.FROMDATE > this.filterInput.TODATE) {
            this.showErrorMessage(this.l('FromDateMustSmallerThanToDate'));
            this.updateView();
            return;
        }
        else {
            this.removeMessage();
            this.updateView();
        }
        this.didsableInput = true;
        if (!this.filterInput.ASS_STATUS)
            this.filterInput.ASS_STATUS = '';
        if (!this.filterInput.IGNORE)
            this.filterInput.IGNORE = '';
        if (!this.filterInput.FROMDATE)
            this.filterInput.FROMDATE = '';

        let reportInfo = new ReportInfo();
        reportInfo.typeExport = ReportTypeConsts.Excel;
        reportInfo.values = this.GetParamsFromFilter({
            headerInput: (this.l('List') + ' ' + this.l('AssInventory') + ' ' + this.filterInput.TYPE_ID + ' ' +
                this.l('At') + ' ' + this.l('Branch') + ' ' + this.l('To') + ' ' +
                this.filterInput.l_NGAYSAOKE.format('DD/MM/YYYY')).toUpperCase(),
            // headerInput: 'DANH SÁCH TÀI SẢN TẠI ' + this.filterInput.BRANCH_NAME.toUpperCase() + ' ĐẾN ' + this.filterInput.l_NGAYSAOKE.format('DD/MM/YYYY'),
            branchInput: (this.l('Branch') + ': ' + this.filterInput.BRANCH_NAME).toUpperCase()
        });

        this.filterInput.DEP_ID = (this.filterInput.DEP_ID) ? this.filterInput.DEP_ID : '';
        reportInfo.parameters = this.GetParamsFromFilter(this.filterInput);

        if (this.filterInput.TYPE_ID == 'TSCD') {
            reportInfo.pathName = "/REPORT/INVENTORY_BY_ID_TSCD.xlsx";
        }
        else {
            reportInfo.pathName = "/REPORT/INVENTORY_BY_ID_CCLD.xlsx";
        }

        reportInfo.storeName = "rpt_INVENTORY_Search";

        this.asposeService.getReport(reportInfo).subscribe(x => {
            this.fileDownloadService.downloadTempFile(x);
            // tra ve kieu date de in lai ko bi loi
            this.didsableInput = false;
            this.showSuccessMessage(this.l('ExportFileSuccess'));
            this.updateView();
        });
    }

    showReportTemplate(){
        if ((this.exportForm as any).form.invalid) {
            this.isShowError = true;
            this.showErrorMessage(this.l('FormInvalid'));
            this.updateView();
            return;
        }

        let parameters = this.GetParamsFromFilter(this.filterInput);
        let values = this.GetParamsFromFilter({
            branchCode: this.appSession.user.branchCode == 'HS'? 'Hội sở': 'CN', // branchCode cho phần ghi chú
            branchName: this.appSession.user.branchName,
            typeName: this.filterInput.TYPE_ID == 'TSCD'? 'Tài sản cố định' : 'Công cụ lao động',
            datePrint: (new DateFormatPipe()).transform(moment()),
            level: this.filterInput.LEVEL == 'ALL' ? this.l('AllGoods') : this.l('Branch'),
            fullName: this.appSession.user.name,
            notes: this.appSession.user.branchCode == 'HS'? this.l('AssListAssetInvent_Note_HS'): this.l('AssListAssetInvent_Note_CN')
        });
        this.previewTemplateService.printReportTemplate(
            this.filterInput.TYPE_ID == 'TSCD'?
            'AssListAssetInventory_reportTSCD' :
            'AssListAssetInventory_reportCCLD', parameters, values);
    }

    initTerms(): void {
        this.termService.cM_TERM_Search(this.getFillterForCombobox()).subscribe(Result => {
            this.didsableInput = false;
            this.terms = Result.items;
            this.updateView();
        });

    }


    getCheckBoxChanged() {
    }

    getAssStatus(): void {
        this.assStatusService.aSS_STATUS_Lst().subscribe(Result => {
            this.assStatuses = Result;
            this.updateView();
        });
    }

    getItemName(event: CM_TERM_ENTITY) {
        this.termName = event.terM_NAME;
        this.filterInput.TERM_ID = event.terM_ID;
    }

    onSelectBranch(branch: CM_BRANCH_ENTITY) {
        this.filterInput.BRANCH_ID = branch.brancH_ID;
        this.branchType = branch.brancH_TYPE;
        if(this.branchType != 'HS'){
            this.filterInput.DEPT_ID = this.filterInput.DEP_NAME = '';
            this.depSelect.setSingleValue('', '');
        }
        this.filterInput.BRANCH_NAME = branch.brancH_NAME;
        this.updateView();
    }

}

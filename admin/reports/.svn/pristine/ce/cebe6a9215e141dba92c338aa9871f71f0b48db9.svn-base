import { Injector, Component, OnInit, ViewEncapsulation, AfterViewInit, ElementRef, ViewChild } from "@angular/core";
import { ReportInfo, AsposeServiceProxy, CM_DEPARTMENT_ENTITY, BranchServiceProxy, CM_BRANCH_ENTITY, CM_DIVISION_ENTITY, DepartmentServiceProxy, RAT_TERM_MASTER_ENTITY, RatTermMasterServiceProxy, ASS_STATUS_ENTITY, AssStatusServiceProxy, TermServiceProxy, CM_TERM_ENTITY } from "@shared/service-proxies/service-proxies";
import { appModuleAnimation } from "@shared/animations/routerTransition";
import { FileDownloadService } from "@shared/utils/file-download.service";
import { ReportTypeConsts } from "@app/admin/core/ultils/consts/ReportTypeConsts";
import { DefaultComponentBase } from "@app/ultilities/default-component-base";
import { PreviewTemplateService } from "@app/admin/common/preview-template/preview-template.service";
import * as moment from 'moment';
import { DepartmentModalComponent } from "@app/admin/core/controls/dep-modal/department-modal.component";
import { DateFormatPipe } from "@app/admin/core/pipes/date-format.pipe";
import { ReportTemplateModalComponent } from "@app/admin/core/controls/report-template-modal/report-template-modal.component";

@Component({
    templateUrl: './ass-list-asset-liquid.component.html',
    encapsulation: ViewEncapsulation.None,
    animations: [appModuleAnimation()]
})

export class AssListAssetLiquidComponent extends DefaultComponentBase implements OnInit, AfterViewInit {

    hidden: boolean = false;

    filterInput: any = {};

    assStatuses: ASS_STATUS_ENTITY[];
    levels: any[];
    terms: CM_TERM_ENTITY[]
    assTypes: any = [{ TYPE_ID: 'TSCD', TYPE_NAME: 'TSCD' }, { TYPE_ID: 'CCLD', TYPE_NAME: 'CCLD' }]
    currentBranch: string = ""
    branchType: string = "";
    @ViewChild('reportTemplate') reportTemplate: ReportTemplateModalComponent;

    @ViewChild("depModal") depModal: DepartmentModalComponent

    ngAfterViewInit(): void {
        this.stopAutoUpdateView();
    }

    constructor(injector: Injector,
        private fileDownloadService: FileDownloadService,
        private asposeService: AsposeServiceProxy,
        private previewTemplateService: PreviewTemplateService,
        private assStatusService: AssStatusServiceProxy,
        private termService: TermServiceProxy
    ) {
        super(injector);

        console.log(this)
        this.initCombobox()
    }

    @ViewChild('editForm') editForm: ElementRef;
    isShowError = false;

    ngOnInit(): void {
        this.currentBranch = this.appSession.user.subbrId;
        this.filterInput.BRANCH_LOGIN = this.currentBranch;
        this.filterInput.BRANCH_ID = this.currentBranch;
        this.filterInput.BRANCH_NAME = this.appSession.user.branchName
        this.filterInput.PriceFrom = 0
        this.filterInput.PriceTo = 0
        this.filterInput.BRANCH_LOGIN = this.appSession.user.subbrId;
        this.filterInput.LEVEL = 'ALL'
        this.filterInput.Fromdate = moment().startOf('year')
        this.filterInput.Todate = moment().endOf('year')
        this.branchType = this.appSession.user.branch.brancH_TYPE;

    }

    initCombobox(): void {
        let filterCombobox = this.getFillterForCombobox()
        this.levels = this.getLevelsCombobox();
        this.assStatusService.aSS_STATUS_Lst().subscribe(response => {
            this.assStatuses = response;
            this.updateView()
        });


        filterCombobox["brancH_LOGIN"] = this.appSession.user.subbrId
        this.termService.cM_TERM_Search(filterCombobox).subscribe(response => {
            this.terms = response.items;
            this.updateView()
        })

    }


    exportToExcel() {

        if (!this.filterInput.DEP_ID) {
            this.filterInput.DEP_ID = ''
        }
        if (!this.filterInput.ASS_STATUS) {
            this.filterInput.ASS_STATUS = ''
        }
        if (!this.filterInput.TYPE_ID) {
            this.filterInput.TYPE_ID = ''
        }
        if (!this.filterInput.IGNORE) {
            this.filterInput.IGNORE = ''
        }
        if (!this.filterInput.IGNORE) {
            this.filterInput.IGNORE = ''
        }

        if ((this.editForm as any).form.invalid) {
            this.isShowError = true;
            this.showErrorMessage(this.l('FormInvalid'));
            this.updateView();
            return;
        }

        let reportInfo = this.getReportInfo();
        reportInfo.pathName = "/REPORT/LIQREQ_BYID.xlsx";
        reportInfo.storeName = "rpt_LIQREQ_Search";


        this.asposeService.getReport(reportInfo).subscribe(x => {
            this.fileDownloadService.downloadTempFile(x);
            this.showSuccessMessage(this.l('ExportFileSuccess'));
            this.updateView();
        });
    }

    getReportInfo(): ReportInfo {
        let reportInfo = new ReportInfo();
        reportInfo.typeExport = ReportTypeConsts.Excel;
        let curDate = moment()
        let dateFormatter = new DateFormatPipe()

        reportInfo.parameters = this.GetParamsFromFilter(this.filterInput);

        reportInfo.values = this.GetParamsFromFilter({
            A4: (this.l('RequestedLiquidationSubTitle') + ' ' + this.l('To') + ' ' + dateFormatter.transform(curDate)).toUpperCase(),
            A2: (this.l('Branch') + ': ' + this.appSession.user.branchName).toUpperCase()
        })

        reportInfo.pathName = "/REPORT/LIQREQ_BYID.xlsx";
        reportInfo.storeName = "rpt_LIQREQ_Search";

        return reportInfo;
    }

    onSelectBranch(branch: CM_BRANCH_ENTITY) {
        this.filterInput.BRANCH_ID = branch.brancH_ID;
        this.filterInput.BRANCH_NAME = branch.brancH_NAME;
        this.filterInput.BRANCH_CODE = branch.brancH_CODE;
        this.branchType = branch.brancH_TYPE;

        if (this.branchType != 'HS') {
            this.filterInput.DEP_ID = '';
        }
    }


    printPreview() {

        // if ((this.editForm as any).form.invalid) {
        //     this.isShowError = true;
        //     this.showErrorMessage(this.l('FormInvalid'));
        //     this.updateView();
        //     return;
        // }

        let parameters = this.GetParamsFromFilter(this.filterInput);
        let values = this.GetParamsFromFilter({
            branchCode: this.appSession.user.branch.brancH_CODE,
            branchName: this.appSession.user.branch.brancH_NAME,
            level: this.filterInput.LEVEL == 'ALL' ? this.l('AllGoods') : this.l('Branch'),
            toDate: this.filterInput.Todate.format('MM/YYYY'),
            fullName: this.appSession.user.name
        });

        this.reportTemplate.show('AssListAssetLiquid_Report', parameters, values)
    }

}

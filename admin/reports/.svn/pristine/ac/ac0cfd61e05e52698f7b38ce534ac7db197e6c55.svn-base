import { Injector, Component, OnInit, ViewEncapsulation, AfterViewInit, ViewChild } from "@angular/core";
import { ReportInfo, AsposeServiceProxy, CM_BRANCH_ENTITY, CAR_MASTER_ENTITY } from "@shared/service-proxies/service-proxies";
import { appModuleAnimation } from "@shared/animations/routerTransition";
import { FileDownloadService } from "@shared/utils/file-download.service";
import { ReportTypeConsts } from "@app/admin/core/ultils/consts/ReportTypeConsts";
import { DefaultComponentBase } from "@app/ultilities/default-component-base";
import { PreviewTemplateService } from "@app/admin/common/preview-template/preview-template.service";
import * as moment from 'moment';
import { BranchModalComponent } from "@app/admin/core/controls/branch-modal/branch-modal.component";
import { CarMasterModalComponent } from "@app/admin/core/controls/car-modal/car-master-modal.component";
import { AuthStatusConsts } from "@app/admin/core/ultils/consts/AuthStatusConsts";
import { DateFormatPipe } from "@app/admin/core/pipes/date-format.pipe";

@Component({
    templateUrl: './car-bc06.component.html',
    encapsulation: ViewEncapsulation.None,
    animations: [appModuleAnimation()]
})

export class CARBC06Component extends DefaultComponentBase implements OnInit, AfterViewInit {
    @ViewChild('branchModal') branchModal: BranchModalComponent;
    @ViewChild('carModal') carModal: CarMasterModalComponent;
    hidden: boolean = false;

    filterInput: any = {};

    levels: any[];
    months: any[];
    years: any[];
    cars: any[];
    ngAfterViewInit(): void {
    }

    constructor(injector: Injector,
        private fileDownloadService: FileDownloadService,
        private asposeService: AsposeServiceProxy,
        private previewTemplateService: PreviewTemplateService) {
        super(injector);
        this.stopAutoUpdateView();
        
    }


    ngOnInit(): void {
        this.initCombobox();
        this.initFilter();
    }
    initCombobox() {
        this.levels = this.getLevelsCombobox();
        this.months = this.getMonthsCombobox();
        this.years = this.getYearsCombobox();
        this.cars = [];
        this.updateView();
    }
    initFilter() {
        this.filterInput.brancH_ID = this.appSession.user.subbrId;
        this.filterInput.brancH_NAME = this.appSession.user.branchName;
        this.filterInput.level = 'ALL';
        this.filterInput.toMonth = moment().month();
        this.filterInput.toYear = moment().year();
        this.filterInput.caR_ID = '';
        this.updateView();
    }
    showBranchModal() {
        this.branchModal.filterInput.brancH_LOGIN = this.appSession.user.subbrId;
        this.branchModal.show();
    }
    showCarModal() {
        this.carModal.filterInput.brancH_ID = this.appSession.user.subbrId;
        this.carModal.filterInput.autH_STATUS = AuthStatusConsts.Approve;
        this.carModal.filterInput.level = 'UNIT';
        this.carModal.show();
    }

    exportToExcel() {
        let reportInfo = new ReportInfo();
        reportInfo.typeExport = ReportTypeConsts.Excel;
        reportInfo.parameters = this.GetParamsFromFilter({
            CAR_ID: this.filterInput.caR_ID,
            BRANCH_LOGIN: this.appSession.user.subbrId,
            BRANCH_ID: this.filterInput.brancH_ID,
            LEVEL: this.filterInput.level,
            TO_DT: moment('1/' + this.filterInput.toMonth + '/' + this.filterInput.toYear, (new DateFormatPipe()).getDateFormatString()),
        });
        reportInfo.values = this.GetParamsFromFilter({
            fullName: (this.l('PrintName') + ': ' + this.appSession.user.name),
            datePrint: (this.l('PrintDT') + ': ' + (new DateFormatPipe()).transform(moment())),
            A4: (this.l('Branch').toUpperCase() + ': ' + this.appSession.user.branchCode + ' ' + this.appSession.user.branchName),
            A5: (this.l('CARBC06Title').toLowerCase() + ' ' + (new DateFormatPipe()).transform(moment('1/' + this.filterInput.toMonth + '/' + this.filterInput.toYear, (new DateFormatPipe()).getDateFormatString()))),
            level: this.filterInput.level == 'ALL' ? this.l('AllGoods') : this.l('Branch'),
        });

        reportInfo.pathName = "/REPORT/XE_BC06.xlsx";
        reportInfo.storeName = "rpt_XE_BC06_Excel";

        this.asposeService.getReport(reportInfo).subscribe(x => {
            this.fileDownloadService.downloadTempFile(x);
        });
    }

    printCarBC06_p(){
        let parameters = [this.GetParamNameAndValue('CAR_ID', this.filterInput.CAR_ID),
        this.GetParamNameAndValue('BRANCH_LOGIN',this.appSession.user.subbrId),
        this.GetParamNameAndValue('BRANCH_ID',this.filterInput.brancH_ID),
        this.GetParamNameAndValue('LEVEL',this.filterInput.level),
        this.GetParamNameAndValue('TO_DT',moment('1/' + this.filterInput.toMonth + '/' + this.filterInput.toYear, (new DateFormatPipe()).getDateFormatString()))      
    ];
        let values = this.GetParamsFromFilter({
            A4: (this.l('Branch').toUpperCase() + ': ' + this.appSession.user.branchCode + ' ' + this.appSession.user.branchName),
            branchName: this.appSession.user.branchName,
            datePrint: moment().format(this.s('gAMSProCore.DateReportDisplayFormat')),
            fullName: this.appSession.user.name,
            month: this.filterInput.toMonth,
            level: this.filterInput.level == 'ALL' ? this.l('AllGoods') : this.l('Branch'),
        });

        this.previewTemplateService.printReportTemplate('CarBC06_Report', parameters, values);
    }

    onSelectBranch(branch: CM_BRANCH_ENTITY) {
        if (!branch) return;
        this.filterInput.brancH_ID = branch.brancH_ID;
        this.filterInput.brancH_NAME = branch.brancH_NAME;
        this.updateView();
    }
    onSelectCar(car: CAR_MASTER_ENTITY) {
        if (!car) return;
        this.cars = [{
            'value': car.caR_ID,
            'display': car.n_PLATE
        }];
        this.updateView();
        this.filterInput.caR_ID = car.caR_ID;
        this.filterInput.n_PLATE = car.n_PLATE;
        this.updateView();
    }
    // printPreview() {



    //     this.previewTemplateService.printReportTemplate("TSCD_BC16A", parameters, values);
    // }

}

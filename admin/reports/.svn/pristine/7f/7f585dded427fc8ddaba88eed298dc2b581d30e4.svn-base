import { Injector, Component, OnInit, ViewEncapsulation, AfterViewInit, ViewChild, ElementRef } from "@angular/core";
import { ReportInfo, AsposeServiceProxy, CM_BRANCH_ENTITY, CM_TERM_ENTITY, TermServiceProxy, CM_EMPLOYEE_ENTITY, ASS_GROUP_ENTITY, CM_SUPPLIER_ENTITY, CM_DEPARTMENT_ENTITY } from "@shared/service-proxies/service-proxies";
import { appModuleAnimation } from "@shared/animations/routerTransition";
import { FileDownloadService } from "@shared/utils/file-download.service";
import { ReportTypeConsts } from "@app/admin/core/ultils/consts/ReportTypeConsts";
import { DefaultComponentBase } from "@app/ultilities/default-component-base";
import * as moment from 'moment';
import { DateFormatPipe } from "@app/admin/core/pipes/date-format.pipe";
import { ReportTemplateModalComponent } from "@app/admin/core/controls/report-template-modal/report-template-modal.component";
import { Select2CustomComponent } from "@app/admin/core/controls/custom-select2/select2-custom.component";

@Component({
    templateUrl: './statement-assets.component.html',
    encapsulation: ViewEncapsulation.None,
    animations: [appModuleAnimation()]
})

export class StatementAssetsComponent extends DefaultComponentBase implements OnInit, AfterViewInit {

    didsableInput: boolean = true;
    terms: CM_TERM_ENTITY[] = [];
    filterInput: any = {};

    termName: string = '';
    levels: any[];
    branchType: string;
    isShowError: boolean = false;
    @ViewChild('exportForm') exportForm: ElementRef;
    @ViewChild('reportTemplate') reportTemplate: ReportTemplateModalComponent;
    @ViewChild('depSelect') depSelect: Select2CustomComponent;
    
    ngAfterViewInit(): void {
        this.stopAutoUpdateView();
        this.setupValidationMessage();
    }

    constructor(injector: Injector,
        private fileDownloadService: FileDownloadService,
        private asposeService: AsposeServiceProxy,
        private termService: TermServiceProxy) {
        super(injector);
    }

    ngOnInit(): void {
        this.levels = this.getLevelsCombobox();
        this.branchType = this.appSession.user.branch.brancH_TYPE;
        this.filterInput.BRANCH_LOGIN = this.appSession.user.subbrId;
        this.filterInput.LEVEL = 'ALL';
        this.filterInput.BRANCH_ID = this.appSession.user.subbrId;
        this.filterInput.BRANCH_NAME = this.appSession.user.branchName;
        this.filterInput.FROMDATE = moment().startOf('month');
        this.filterInput.TODATE = moment().endOf('month');
        this.filterInput.FROMPRICE = 0;
        this.filterInput.TOPRICE = 0;
    }
    
    exportToExcel() {
        if ((this.exportForm as any).form.invalid) {
            this.isShowError = true;
            this.showErrorMessage(this.l('FormInvalid'));
            this.updateView();    
            return;
        }
        if(this.filterInput.FROMDATE > this.filterInput.TODATE){
            this.showErrorMessage(this.l('FromDateMustSmallerThanToDate'));
            this.updateView();
            return;
        }
        if(this.filterInput.FROMPRICE > this.filterInput.TOPRICE){
            this.showErrorMessage(this.l('FromPriceMustSmallerThanToPrice'));
            this.updateView();
            return;
        }
        if(!this.filterInput.FROMDATE && !this.filterInput.TODATE){
            this.showErrorMessage(this.l('ChooseDateRequired'));
            this.updateView();
            return;
        }

        this.didsableInput = true;
        if(!this.filterInput.SUPPLIER_ID)
            this.filterInput.SUPPLIER_ID = '';
        if(!this.filterInput.GROUP_ID)
            this.filterInput.GROUP_ID = '';
        if(!this.filterInput.USER_ID)
            this.filterInput.USER_ID = '';
        if(!this.filterInput.FROMPRICE)
            this.filterInput.FROMPRICE = 0;
        if(!this.filterInput.TOPRICE)
            this.filterInput.TOPRICE = 0;
        if(!this.filterInput.FROMDATE)
            this.filterInput.FROMDATE = '';

        let reportInfo = new ReportInfo();
        reportInfo.typeExport = ReportTypeConsts.Excel;
        
        reportInfo.values = this.GetParamsFromFilter({
            fromDateToDateInput: (this.l('FromDate') + ' ' + ((this.filterInput.FROMDATE != '') ? this.filterInput.FROMDATE.format('DD/MM/YYYY') : '')
            + ' ' + this.l('ToDate') + ' ' + this.filterInput.TODATE.format('DD/MM/YYYY')).toUpperCase(),
            branhInput: 'Đơn vị: ' + this.appSession.user.branchName.toUpperCase(),
            levelInput: this.levels.filter(x => x.value == this.filterInput.LEVEL)[0].display
        });


        reportInfo.parameters = this.GetParamsFromFilter(this.filterInput);

        reportInfo.pathName = "/REPORT/TSCD_BC08_2.xlsx";
        reportInfo.storeName = "rpt_TSCD_BC08_2_Excel";

        this.asposeService.getReport(reportInfo).subscribe(x => {
            this.fileDownloadService.downloadTempFile(x);
            this.showSuccessMessage('ExportFileSuccess');
            this.updateView();
        });
    }

    showReportTemplate(){
        // if(!this.filterInput.DEP_NAME)
        //     this.filterInput.DEP_ID = '';
        let parameters = this.GetParamsFromFilter(this.filterInput);
        let values = this.GetParamsFromFilter({
            branchCode: this.appSession.user.branchCode,
            branchName: this.appSession.user.branchName,
            fromDate: (new DateFormatPipe()).transform(this.filterInput.FROMDATE),
            toDate: (new DateFormatPipe()).transform(this.filterInput.TODATE),
            datePrint: (new DateFormatPipe()).transform(moment()),
            level: this.filterInput.LEVEL == 'ALL' ? this.l('AllGoods') : this.l('Branch'),
            fullName: this.appSession.user.name
        });
        this.reportTemplate.show('StatementAssets_report', parameters, values);
        // this.previewTemplateService.printReportTemplate('AssetListOverViewAsset_report', parameters, values); 
    }

    initTerms(): void {
        this.termService.cM_TERM_Search(this.getFillterForCombobox()).subscribe(Result => {
            this.didsableInput = false;
            this.terms = Result.items;
            this.updateView();
        });
        
    }

    getItemName(event: CM_TERM_ENTITY){
        this.termName = event.terM_NAME;
        this.filterInput.terM_ID = event.terM_ID;
    }

    // onSelectBranch(branch: CM_BRANCH_ENTITY) {
        // if(!branch.brancH_ID)
        //     return;
    //     this.filterInput.BRANCH_ID = branch.brancH_ID;
    //     this.filterInput.BRANCH_NAME = branch.brancH_NAME;

    //     this.branchType = branch.brancH_TYPE;
    //     if (this.branchType != 'HS') // k phai HS thi reset phong ban 
    //     {
    //         this.filterInput.DEP_ID = this.filterInput.DEP_NAME = '';
    //         this.updateView();
    //     }
    // }

    onSelectBranch(branch: CM_BRANCH_ENTITY) {
        if(!branch.brancH_ID)
            return;
        
        this.filterInput.BRANCH_ID = branch.brancH_ID;
        this.branchType = branch.brancH_TYPE;
        if (this.branchType != 'HS') {
            this.filterInput.DEP_ID = '';
            this.depSelect.setSingleValue('', '');
        }
        this.filterInput.BRANCH_NAME = branch.brancH_NAME;
        this.updateView();
    }

    // onSelectDep(dep: CM_DEPARTMENT_ENTITY): void {
    //     this.filterInput.DEP_ID = dep.deP_ID;
    //     this.filterInput.DEP_NAME = dep.deP_NAME;
    // }
    
}

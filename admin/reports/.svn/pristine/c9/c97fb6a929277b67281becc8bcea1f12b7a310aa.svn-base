import { Injector, Component, OnInit, ViewEncapsulation, AfterViewInit, ViewChild, ElementRef } from "@angular/core";
import { ReportInfo, AsposeServiceProxy, CM_BRANCH_ENTITY, CM_DEPARTMENT_ENTITY } from "@shared/service-proxies/service-proxies";
import { appModuleAnimation } from "@shared/animations/routerTransition";
import { FileDownloadService } from "@shared/utils/file-download.service";
import { ReportTypeConsts } from "@app/admin/core/ultils/consts/ReportTypeConsts";
import { DefaultComponentBase } from "@app/ultilities/default-component-base";
import * as moment from 'moment';
import { Select2CustomComponent } from "@app/admin/core/controls/custom-select2/select2-custom.component";
import { PreviewTemplateService } from "@app/admin/common/preview-template/preview-template.service";
import { DateFormatPipe } from "@app/admin/core/pipes/date-format.pipe";
import { ReportTemplateModalComponent } from "@app/admin/core/controls/report-template-modal/report-template-modal.component";

export enum PBXuatBaoCao {
    HCQT = 0, KT = 1,
}

@Component({
    templateUrl: './ass-saoke-TSCD-detail.component.html',
    encapsulation: ViewEncapsulation.None,
    animations: [appModuleAnimation()]
})


export class AssSaoKeTSCDDetailComponent extends DefaultComponentBase implements OnInit, AfterViewInit {
    PBXuatBaoCao = PBXuatBaoCao;
    didsableInput: boolean = true;
    filterInput: any = {};

    levels: any[];
    isShowError: boolean = false;
    branchType: string;
    assTypes: any[];
    isBranchUseSelected: boolean = false;

    @ViewChild('exportForm') exportForm: ElementRef;
    @ViewChild('branchUseSelect') branchUseSelect: Select2CustomComponent;
    @ViewChild('reportTemplate') reportTemplate: ReportTemplateModalComponent;

    ngAfterViewInit(): void {
        this.stopAutoUpdateView();
        this.setupValidationMessage();
    }

    constructor(injector: Injector,
        private fileDownloadService: FileDownloadService,
        private asposeService: AsposeServiceProxy,
        private previewTemplateService: PreviewTemplateService, ) {
        super(injector);
    }

    ngOnInit(): void {
        this.levels = this.getLevelsCombobox();
        this.branchType = this.appSession.user.branch.brancH_TYPE;
        this.filterInput.BRANCH_LOGIN = this.appSession.user.subbrId;
        this.filterInput.LEVEL = 'ALL';
        this.filterInput.BRANCH_ID = this.appSession.user.subbrId;
        this.filterInput.BRANCH_NAME = this.appSession.user.branchName;
        this.filterInput.FROMDATE = '';
        this.filterInput.TODATE = moment().endOf('month');
        this.filterInput.FROMPRICE = 0;
        this.filterInput.TOPRICE = 0;
        this.assTypes = [{ TYPE_ID: 'TSCD', TYPE_NAME: 'TSCD' }];
        this.filterInput.ASSET_TYPE = 'TSCD';
    }

    exportToExcel(pb: PBXuatBaoCao) {
        if ((this.exportForm as any).form.invalid) {
            this.isShowError = true;
            this.showErrorMessage(this.l('FormInvalid'));
            this.updateView();
            return;
        }
        if (!this.filterInput.TODATE) {
            this.showErrorMessage(this.l('ChooseDateRequired'));
            this.updateView();
            return;
        }

        if (this.filterInput.FROMPRICE > this.filterInput.TOPRICE) {
            this.showErrorMessage(this.l('FromPriceMustSmallerThanToPrice'));
            this.updateView();
            return;
        }
        this.didsableInput = true;

        if (!this.filterInput.SUPPLIER_ID)
            this.filterInput.SUPPLIER_ID = '';
        if (!this.filterInput.ASSETGROUP_ID)
            this.filterInput.ASSETGROUP_ID = '';
        if (!this.filterInput.BRANCHUSE)
            this.filterInput.BRANCHUSE = '';
        if (!this.filterInput.FROMPRICE)
            this.filterInput.FROMPRICE = 0;
        if (!this.filterInput.TOPRICE)
            this.filterInput.TOPRICE = 0;
        if (!this.filterInput.TODATE)
            this.filterInput.TODATE = '';
        if (!this.filterInput.USER_ID)
            this.filterInput.USER_ID = '';
        if (!this.filterInput.DEP_ID)
            this.filterInput.DEP_ID = '';

        let reportInfo = new ReportInfo();
        reportInfo.typeExport = ReportTypeConsts.Excel;

        reportInfo.values = this.GetParamsFromFilter({
            toDateInput: (this.l('ToDate') + ' ' + this.filterInput.TODATE.format('DD/MM/YYYY')).toUpperCase(),
            branchInput: 'Đơn vị: ' + this.appSession.user.branchName.toUpperCase(),
            levelInput: this.levels.filter(x => x.value == this.filterInput.LEVEL)[0].display,
            userInput: this.appSession.user.userName,
            dateInput: moment().format('DD/MM/YYYY')
        });


        reportInfo.parameters = this.GetParamsFromFilter(this.filterInput);

        switch (pb) {
            case PBXuatBaoCao.KT:
                reportInfo.pathName = "/REPORT/TSCD_BC08_1.xlsx";
                reportInfo.storeName = "rpt_TSCD_BC08_Excel";
                break;
            case PBXuatBaoCao.HCQT:
                reportInfo.pathName = "/REPORT/TSCD_BC08_1_HCQT.xlsx";
                reportInfo.storeName = "rpt_TSCD_BC08_Excel";
        }


        this.asposeService.getReport(reportInfo).subscribe(x => {
            this.fileDownloadService.downloadTempFile(x);
            this.showSuccessMessage(this.l('ExportFileSuccess'));
            this.updateView();
        });
    }

    showReportTemplate() {
        if (!this.filterInput.TODATE) {
            this.showErrorMessage(this.l('ChooseDateRequired'));
            this.updateView();
            return;
        }
        if(this.filterInput.PRICEFROM > this.filterInput.PRICETO){
            this.showErrorMessage(this.l('PriceToMustSmallerThanPriceFrom'));
            this.updateView();
            return;
        }
        let parameters = this.GetParamsFromFilter(this.filterInput);
        let values = this.GetParamsFromFilter({
            branchCode: this.appSession.user.branchCode,
            branchName: this.appSession.user.branchName,
            toDate: (new DateFormatPipe()).transform(this.filterInput.TODATE),
            datePrint: (new DateFormatPipe()).transform(moment()),
            level: this.filterInput.LEVEL == 'ALL' ? this.l('AllGoods') : this.l('Branch'),
            fullName: this.appSession.user.name
        });
        this.reportTemplate.show('AssSaoKeTSCDDetail_report', parameters, values);
        // this.previewTemplateService.printReportTemplate('AssListOverViewPOConstructionAssetFix_report', parameters, values); 
    }

    onSelectDep(dep: CM_DEPARTMENT_ENTITY): void {
        this.filterInput.DEP_ID = dep.deP_ID;
        this.filterInput.DEP_NAME = dep.deP_NAME;
    }

    onSelectBranch(branch: CM_BRANCH_ENTITY) {
        if(!branch.brancH_ID)
            return;
        if (this.isBranchUseSelected)
            this.branchUseSelect.setSingleValue(branch.brancH_ID, branch.brancH_NAME);
        else {
            this.filterInput.BRANCH_ID = branch.brancH_ID;
            this.filterInput.BRANCH_NAME = branch.brancH_NAME;
        }
        this.branchType = branch.brancH_TYPE;
        if (this.branchType != 'HS') // k phai HS thi reset phong ban 
        {
            this.filterInput.DEP_ID = this.filterInput.DEP_NAME = '';
            this.updateView();
        }
    }

}

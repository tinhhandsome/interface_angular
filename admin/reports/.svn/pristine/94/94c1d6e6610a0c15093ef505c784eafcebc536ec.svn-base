import { Injector, Component, OnInit, ViewEncapsulation, AfterViewInit, ViewChild, ElementRef } from "@angular/core";
import { ReportInfo, AsposeServiceProxy, CM_BRANCH_ENTITY, CM_DEPARTMENT_ENTITY } from "@shared/service-proxies/service-proxies";
import { appModuleAnimation } from "@shared/animations/routerTransition";
import { FileDownloadService } from "@shared/utils/file-download.service";
import { ReportTypeConsts } from "@app/admin/core/ultils/consts/ReportTypeConsts";
import { DefaultComponentBase } from "@app/ultilities/default-component-base";
import * as moment from 'moment';
import { DateFormatPipe } from "@app/admin/core/pipes/date-format.pipe";
import { PreviewTemplateService } from "@app/admin/common/preview-template/preview-template.service";

@Component({
    templateUrl: './asset-list-over-view-asset-main.component.html',
    encapsulation: ViewEncapsulation.None,
    animations: [appModuleAnimation()]
})

export class AssetListOverViewAssetMainComponent extends DefaultComponentBase implements OnInit, AfterViewInit {

    filterInput: any = {};

    levels: any[];
    isShowError: boolean = false;

    @ViewChild('exportForm') exportForm: ElementRef;

    ngAfterViewInit(): void {
        this.stopAutoUpdateView();
    }

    constructor(injector: Injector,
        private fileDownloadService: FileDownloadService,
        private asposeService: AsposeServiceProxy,
        private previewTemplateService: PreviewTemplateService) {
        super(injector);
    }

    ngOnInit(): void {
        this.levels = this.getLevelsCombobox();
        this.filterInput.BRANCH_LOGIN = this.appSession.user.subbrId;
        this.filterInput.LEVEL = 'ALL';
        this.filterInput.BRANCH_ID = this.appSession.user.subbrId;
        this.filterInput.BRANCH_NAME = this.appSession.user.branchName;
        this.filterInput.FROMDATE = moment().startOf('year');
        this.filterInput.TODATE = moment().endOf('year');
    }

    inputIsValid() : boolean
    {
        if ((this.exportForm as any).form.invalid) {
            this.isShowError = true;
            this.showErrorMessage(this.l('FormInvalid'));
            this.updateView();
            return false;
        }
        if (!this.filterInput.TODATE) {
            this.showErrorMessage(this.l('ChooseDateRequired'));
            this.updateView();
            return false;
        }
        if(this.filterInput.FROMDATE && this.filterInput.TODATE.diff(this.filterInput.FROMDATE,'days') <= 0){
            this.showErrorMessage(this.l('FromDateMustSmallerThanToDate'));
            this.updateView();
            return false;
        }
        if (!this.filterInput.FROMDATE)
            this.filterInput.FROMDATE = '';
        return true;
    }
    exportToExcel() {
        if(!this.inputIsValid()) return;
        let reportInfo = new ReportInfo();
        reportInfo.typeExport = ReportTypeConsts.Excel;
        
        reportInfo.values = this.GetParamsFromFilter({
            fromDateToDateInput: (this.l('FromDate') + ' ' + ((this.filterInput.FROMDATE != '') ? this.filterInput.FROMDATE.format('DD/MM/YYYY') : '')
            + ' ' + this.l('ToDate') + ' ' + this.filterInput.TODATE.format('DD/MM/YYYY')).toUpperCase(),
            branchIdInput: this.appSession.user.subbrId,
            branchNameInput: this.appSession.user.branchName,
            userEmailInput: this.appSession.user.emailAddress,
            levelInput: this.levels.filter(x => x.value == this.filterInput.LEVEL)[0].display,
            datePrintInput: moment().format('DD/MM/YYYY')
        });


        reportInfo.parameters = this.GetParamsFromFilter(this.filterInput);

        reportInfo.pathName = "/REPORT/TSCD_BC06_1.xlsx";
        reportInfo.storeName = "rpt_TSCD_BC06_1_Excel";

        this.asposeService.getReport(reportInfo).subscribe(x => {
            this.fileDownloadService.downloadTempFile(x);
            this.showSuccessMessage(this.l('ExportFileSuccess'));
            this.updateView();
        });
    }
    printPreview()
    {
        if(!this.inputIsValid())return;
        var str = '';
        var datePipe = new DateFormatPipe();
        if(this.filterInput.FROMDATE) 
        str += ' ' + this.l('FromDate') + ' ' + datePipe.transform(this.filterInput.FROMDATE)
             + ' ' + this.l('ToDate').toLowerCase() + ' ' + datePipe.transform(this.filterInput.TODATE);
        else
        str +=  ' ' + this.l('ToDate') + ' ' + datePipe.transform(this.filterInput.TODATE);

        let parameters = this.GetParamsFromFilter({
            Branch_ID: this.filterInput.BRANCH_ID,
            BRANCH_LOGIN: this.appSession.user.subbrId,
            LEVEL: this.filterInput.LEVEL,
            Fromdate: datePipe.transform(this.filterInput.FROMDATE),
            Todate:  datePipe.transform(this.filterInput.TODATE),
        });
        let values = this.GetParamsFromFilter({ 
            level: this.filterInput.LEVEL == 'UNIT' ? this.l('Branch') : this.l('AllGoods'),
            fullName : this.appSession.user.userName,
            datePrint : datePipe.transform(moment()),
            branchCode: this.appSession.user.branchCode,
            branchName: this.appSession.user.branchName,
            A5 : str,
        });

        this.previewTemplateService.printReportTemplate('AssetListOverViewAssetMain_Report', parameters, values);
    }
    onSelectDep(dep: CM_DEPARTMENT_ENTITY): void {
        this.filterInput.DEP_CODE = dep.deP_CODE;
        this.filterInput.DEP_ID = dep.deP_ID;
        this.filterInput.DEP_NAME = dep.deP_NAME;
    }

    onSelectBranch(branch: CM_BRANCH_ENTITY) {
        this.filterInput.BRANCH_ID = branch.brancH_ID;
        this.filterInput.BRANCH_NAME = branch.brancH_NAME;
    }

}
